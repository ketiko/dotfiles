source ~/.zi/bin/zi.zsh

zi ice wait lucid
zi light zsh-users/zsh-syntax-highlighting
zi ice wait lucid
zi light zsh-users/zsh-completions
zi light zsh-users/zsh-history-substring-search
zi ice wait lucid
zi snippet OMZP::aws
SHOW_AWS_PROMPT=false
zi ice wait lucid
zi light greymd/docker-zsh-completion
# https://github.com/Aloxaf/fzf-tab#install
# must load after compinit but before plugins like autosuggestions
zi ice wait lucid
zi light Aloxaf/fzf-tab
zi light zsh-users/zsh-autosuggestions

zi ice wait lucid
zi light chitoku-k/fzf-zsh-completions
# zplug "bonnefoa/kubectl-fzf", defer:3
zi ice wait lucid
zi light MenkeTechnologies/zsh-more-completions
zi ice wait lucid
zi snippet OMZP::git
# zplug "plugins/ag", from:oh-my-zsh
# zplug "plugins/asdf", from:oh-my-zsh
# zplug "plugins/aws", from:oh-my-zsh
# zplug "plugins/brew", from:oh-my-zsh
# zplug "plugins/bundler", from:oh-my-zsh
# zplug "plugins/cask", from:oh-my-zsh
# zplug "plugins/colorize", from:oh-my-zsh
zi ice wait lucid
zi snippet OMZP::docker-compose
zi ice wait lucid
zi snippet OMZP::docker
# zplug "plugins/encode64", from:oh-my-zsh
# zplug "plugins/fasd", from:oh-my-zsh
# zplug "plugins/fd", from:oh-my-zsh
# zplug "plugins/fzf", from:oh-my-zsh
# zplug "plugins/gh", from:oh-my-zsh
# zplug "plugins/github", from:oh-my-zsh
# zplug "plugins/history", from:oh-my-zsh
# zplug "plugins/httpie", from:oh-my-zsh
# zplug "plugins/iterm2", from:oh-my-zsh
# zplug "plugins/kube-ps1", from:oh-my-zsh
zi ice wait lucid
zi snippet OMZP::kubectl
zi ice wait lucid
zi snippet OMZP::kubectx
# zi ice wait lucid
# zi snippet OMZP::minikube
zi snippet OMZP::kube-ps1
# zplug "plugins/npm", from:oh-my-zsh, defer:2
zi ice wait lucid
zi snippet OMZP::pip
# zi ice wait lucid
# zi snippet OMZP::pipenv
# zplug "plugins/pyenv", from:oh-my-zsh, defer:2
# zplug "plugins/pylint", from:oh-my-zsh, defer:2
# zplug "plugins/python", from:oh-my-zsh, defer:2
# zplug "plugins/rake", from:oh-my-zsh, defer:2
# zplug "plugins/ripgrep", from:oh-my-zsh, defer:2
# zplug "plugins/ruby", from:oh-my-zsh, defer:2


ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=6"
ZSH_AUTOSUGGEST_USE_ASYNC=1
bindkey '^ ' autosuggest-accept

autoload -U compinit && compinit
autoload -U +X bashcompinit && bashcompinit
zmodload -i zsh/complist

source <(kubectl completion zsh)

zstyle ':completion:*' use-cache on
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
  adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
  clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
  gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
  ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
  named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
  operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
  rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
  usbmux uucp vcsa wwwrun xfs '_*'

zstyle ':fzf-tab:*' fzf-bindings 'space:accept'
zstyle ':fzf-tab:*' accept-line enter

autoload -U colors && colors

# get the name of the branch we are on
function git_prompt_info() {
  if [[ "$(command git config --get oh-my-zsh.hide-status 2>/dev/null)" != "1" ]]; then
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
      ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
          echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
  fi
}

# Checks if working tree is dirty
parse_git_dirty() {
  local STATUS=''
  local FLAGS
  FLAGS=('--porcelain')
  if [[ "$(command git config --get oh-my-zsh.hide-dirty)" != "1" ]]; then
    if [[ $POST_1_7_2_GIT -gt 0 ]]; then
      FLAGS+=('--ignore-submodules=dirty')
    fi
    if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
      FLAGS+=('--untracked-files=no')
    fi
    STATUS=$(command git status "${FLAGS[@]}" 2> /dev/null | tail -n1)
  fi
  if [[ -n $STATUS ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  else
    echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  fi
}

prompt_pygmalion_precmd(){
  gitinfo=$(git_prompt_info)
  gitinfo_nocolor=$(echo "$gitinfo" | perl -pe "s/%\{[^}]+\}//g")
  exp_nocolor="$(print -P \"$base_prompt_nocolor$gitinfo_nocolor$post_prompt_nocolor\")"
  prompt_length=${#exp_nocolor}

  nl=""

  if [[ $prompt_length -gt 40 ]]; then
    nl=$'\n%{\r%}';
  fi
  PROMPT="$base_prompt$gitinfo$(kube_ps1)$nl$post_prompt"
}

ZSH_THEME_GIT_PROMPT_PREFIX="%{$reset_color%}%{${fg[green]}%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{${fg[yellow]}%}\U26a1%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN=""

base_prompt="%{${fg[magenta]}%}%n%{$reset_color%}%{${fg[cyan]}%}@%{$reset_color%}%{${fg[yellow]}%}%m%{$reset_color%}%{${fg[red]}%}:%{$reset_color%}%{${fg[cyan]}%}%0~%{$reset_color%}%{${fg[red]}%}|%{$reset_color%}"
post_prompt="%{${fg[cyan]}%}â‡’%{$reset_color%}  "

base_prompt_nocolor=$(echo "$base_prompt" | perl -pe "s/%\{[^}]+\}//g")
post_prompt_nocolor=$(echo "$post_prompt" | perl -pe "s/%\{[^}]+\}//g")

precmd_functions+=(prompt_pygmalion_precmd)

# Apply theming defaults
PS1="%n@%m:%~%# "

## Command history configuration
if [ -z "$HISTFILE" ]; then
  HISTFILE=$HOME/.zsh_history
fi

HISTSIZE=10000
SAVEHIST=10000

# Show history
case $HIST_STAMPS in
  "mm/dd/yyyy") alias history='fc -fl 1' ;;
  "dd.mm.yyyy") alias history='fc -El 1' ;;
  "yyyy-mm-dd") alias history='fc -il 1' ;;
  *) alias history='fc -l 1' ;;
esac

setopt append_history
setopt extended_history
setopt inc_append_history
setopt hist_expire_dups_first
setopt hist_ignore_dups # ignore duplication command history list
setopt hist_ignore_space
setopt hist_find_no_dups
setopt hist_verify
setopt hist_reduce_blanks
setopt share_history # share command history data

# setopt extended_glob

setopt no_beep
setopt multios

# Setup the prompt with pretty colors
setopt prompt_subst

## smart urls
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

## jobs
setopt long_list_jobs

unsetopt correct_all # spelling correction for arguments
unsetopt correct # spelling correction for commands

setopt always_to_end # When completing from the middle of a word, move the cursor to the end of the word
setopt complete_in_word # Allow completion from within a word/phrase

# vi mode
bindkey -v

# backspace and ^h working even after
# returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word

# ctrl-r starts searching history backward
bindkey '^r' history-incremental-search-backward

# allow v to edit the command line (standard behaviour)
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line

# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' up-history
bindkey '^N' down-history

# https://robots.thoughtbot.com/how-to-use-arguments-in-a-rake-task
unsetopt nomatch

# bind UP and DOWN arrow keys
zmodload zsh/terminfo
bindkey "${terminfo[kcuu1]}" history-substring-search-up
bindkey "${terminfo[kcud1]}" history-substring-search-down
# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
source "$HOME"/.aliases

if [ -f "$HOME"/.zshrc.local ]; then
  source "$HOME"/.zshrc.local
fi

if [ -f "$HOME/.fzf.zsh" ]; then
  source "$HOME"/.fzf.zsh
fi

unalias zz 2> /dev/null
zz() {
  local dir
  dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
}
unalias vv 2> /dev/null
vv() {
  local file
  file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && vi "${file}" || return 1
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [ -d "$HOME/.asdf" ]; then
  source "$HOME"/.asdf/asdf.sh
  # source $HOME/.asdf/completions/asdf.bash
fi

if command -v terraform &> /dev/null; then
  tf=$(which terraform)
  complete -o nospace -C "$tf" terraform
fi

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

acps() {
  unset AWS_DEFAULT_PROFILE
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  if [ ! -z $1 ]; then
    export AWS_PROFILE=$1
  else
    export AWS_PROFILE=$(aws configure list-profiles | fzf -0 )
  fi
  export AWS_DEFAULT_PROFILE="$AWS_PROFILE"

  aws sts get-caller-identity > /dev/null 2>&1 || aws sso login
  echo "Switched to AWS Profile: $AWS_PROFILE"
}
