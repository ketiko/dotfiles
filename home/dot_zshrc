# profile
if [[ ${PROFILE_ZSH} == "true" ]]; then
  zmodload zsh/zprof
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [ ! -d $ZINIT_HOME/.git ]; then
  echo 'Installing zinit'
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

source "${ZINIT_HOME}/zinit.zsh"

if [ ! -d $ZSH_CACHE_DIR/completions ]; then
  mkdir -p $ZSH_CACHE_DIR/completions
fi

zinit ice lucid depth=1
zinit load romkatv/powerlevel10k

# zinit ice wait lucid depth=1
# zinit pack atload=+"zicompinit_fast; zicdreplay" for system-completions

zinit ice wait lucid depth=1
zinit load zsh-users/zsh-completions
zinit ice wait lucid depth=1
zinit load zsh-users/zsh-history-substring-search
zinit ice wait lucid depth=1
zinit snippet OMZP::aws
zinit ice wait lucid depth=1
zinit snippet OMZP::helm
zinit ice wait lucid depth=1
zinit load greymd/docker-zsh-completion
zinit ice wait lucid depth=1
zinit load Aloxaf/fzf-tab # https://github.com/Aloxaf/fzf-tab#install must load after compinit but before plugins like autosuggestions
zinit ice wait lucid depth=1
zinit load zsh-users/zsh-autosuggestions

zinit ice wait lucid depth=1
zinit load chitoku-k/fzf-zsh-completions
zinit ice wait lucid depth=1
zinit snippet OMZP::git
zinit ice wait lucid depth=1
zinit snippet OMZP::terraform
zinit ice wait lucid depth=1
zinit snippet OMZP::docker-compose
zinit ice wait lucid depth=1
zinit snippet OMZP::kubectl
zinit ice wait lucid depth=1
zinit snippet OMZP::kubectx
zinit ice wait lucid depth=1
zinit snippet OMZP::pip

zinit ice wait lucid depth=1
zinit for \
  zdharma-continuum/fast-syntax-highlighting \
  zdharma-continuum/history-search-multi-word
  # MenkeTechnologies/zsh-more-completions \


ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=6"
ZSH_AUTOSUGGEST_USE_ASYNC=1
bindkey '^ ' autosuggest-accept

if command -v brew &>/dev/null; then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

FPATH="$HOME/.zsh/completions:${FPATH}"

ZINIT[COMPINIT_OPTS]="-C"
# autoload -Uz compinit
# compinit -C

## See https://github.com/sorin-ionescu/prezto/blob/c0cdc12708803c4503cb1b3d7d42e5c1b8ba6e86/modules/completion/init.zsh#L53C1-L68C17
## Load and initialize the completion system ignoring insecure directories with a
## cache time of 20 hours, so it should almost always regenerate the first time a
## shell is opened each day.
autoload -Uz compinit
_comp_path="${XDG_CACHE_HOME:-$HOME/.cache}/zcompdump"
# #q expands globs in conditional expressions
if [[ $_comp_path(#qNmh-20) ]]; then
  # -C (skip function check) implies -i (skip security check).
  compinit -C -d "$_comp_path"
else
  mkdir -p "$_comp_path:h"
  compinit -i -d "$_comp_path"
  # Keep $_comp_path younger than cache time even if it isn't regenerated.
  touch "$_comp_path"
fi
unset _comp_path

zinit cdreplay -q

autoload -U +X bashcompinit && bashcompinit
zmodload -i zsh/complist

zstyle :plugin:history-search-multi-word reset-prompt-protect 1
zstyle ':completion:*' use-cache on
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
  adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
  clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
  gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
  ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
  named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
  operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
  rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
  usbmux uucp vcsa wwwrun xfs '_*'

zstyle ':fzf-tab:*' fzf-bindings 'space:accept'
zstyle ':fzf-tab:*' accept-line enter

autoload -U colors && colors

## Command history configuration
if [ -z "$HISTFILE" ]; then
  HISTFILE=$HOME/.zsh_history
fi

export HISTSIZE=1000000
export SAVEHIST=$HISTSIZE

# Show history
case $HIST_STAMPS in
  "mm/dd/yyyy") alias history='fc -fl 1' ;;
  "dd.mm.yyyy") alias history='fc -El 1' ;;
  "yyyy-mm-dd") alias history='fc -il 1' ;;
  *) alias history='fc -l 1' ;;
esac

setopt APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_DUPS # ignore duplication command history list
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt HIST_SAVE_NO_DUPS
setopt HIST_VERIFY
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY # share command history data
setopt always_to_end # When completing from the middle of a word, move the cursor to the end of the word
setopt append_history         # Allow multiple sessions to append to one Zsh command history.
setopt auto_cd              # Use cd by typing directory name if it's not a command.
setopt auto_list            # Automatically list choices on ambiguous completion.
setopt auto_pushd           # Make cd push the old directory onto the directory stack.
setopt bang_hist            # Treat the '!' character, especially during Expansion.
setopt complete_in_word # Allow completion from within a word/phrase
setopt extended_history       # Show timestamp in history.
setopt hist_expire_dups_first # Expire A duplicate event first when trimming history.
setopt hist_find_no_dups      # Do not display a previously found event.
setopt hist_ignore_all_dups   # Remove older duplicate entries from history.
setopt hist_ignore_dups       # Do not record an event that was just recorded again.
setopt hist_ignore_space      # Do not record an Event Starting With A Space.
setopt hist_reduce_blanks     # Remove superfluous blanks from history items.
setopt hist_save_no_dups      # Do not write a duplicate event to the history file.
setopt hist_verify            # Do not execute immediately upon history expansion.
setopt inc_append_history     # Write to the history file immediately, not when the shell exits.
setopt interactive_comments # Comments even in interactive shells.
setopt long_list_jobs ## jobs
setopt multios              # Implicit tees or cats when multiple redirections are attempted.
setopt no_beep              # Don't beep on error.
setopt prompt_subst         # Substitution of parameters inside the prompt each time the prompt is drawn.
setopt pushd_ignore_dups    # Don't push multiple copies directory onto the directory stack.
setopt pushd_minus          # Swap the meaning of cd +1 and cd -1 to the opposite.
setopt share_history          # Share history between different instances of the shell.

## smart urls
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# vi mode
bindkey -v

# backspace and ^h working even after
# returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word

# ctrl-r starts searching history backward
bindkey '^r' history-incremental-search-backward

# allow v to edit the command line (standard behaviour)
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line

# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' up-history
bindkey '^N' down-history

# bind UP and DOWN arrow keys
zmodload zsh/terminfo
bindkey "${terminfo[kcuu1]}" history-substring-search-up
bindkey "${terminfo[kcud1]}" history-substring-search-down
# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Homebrew must be before asdf for things like node to be used from asdf
brew_prefixes=(/opt/homebrew /usr/local)
for prefix in ${brew_prefixes[@]}; do
  if [ -f "$prefix"/bin/brew ]; then
    eval $("$prefix"/bin/brew shellenv)
  fi
done

# Be higher so that command -v blah picks up things from asdf
if command -v asdf &>/dev/null; then
  if [ -d "$HOME/.asdf" ]; then
    source "$HOME"/.asdf/asdf.sh
    source $HOME/.asdf/completions/asdf.bash

    if command -v java &>/dev/null; then
      if [ -d "$HOME/.asdf/plugins/java/set-java-home.zsh" ]; then
        source $HOME/.asdf/plugins/java/set-java-home.zsh
      fi
    fi

    if command -v go &>/dev/null; then
      if [ -d "$HOME/.asdf/plugins/golang/set-env.zsh" ]; then
        source $HOME/.asdf/plugins/golang/set-env.zsh
      fi
    fi
  fi
fi

source "$HOME"/.aliases

if [ -f "$HOME/.fzf.zsh" ]; then
  source "$HOME"/.fzf.zsh
fi

unalias zz 2> /dev/null
zz() {
  local dir
  dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
}
unalias vv 2> /dev/null
vv() {
  local file
  file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && vi "${file}" || return 1
}

if command -v terraform &> /dev/null; then
  tf=$(which terraform)
  complete -o nospace -C "$tf" terraform
fi

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

acps() {
  unset AWS_DEFAULT_PROFILE
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  if [ ! -z $1 ]; then
    export AWS_PROFILE=$1
  else
    export AWS_PROFILE=$(aws configure list-profiles | fzf -0 )
  fi
  # export AWS_DEFAULT_PROFILE="$AWS_PROFILE"

  aws sts get-caller-identity > /dev/null 2>&1 || aws sso login
  echo "Switched to AWS Profile: $AWS_PROFILE"
}

if command -v kubectl &>/dev/null; then
  local completion_file="$HOME"/._completion_kubectl.zsh
  if [[ ! -a "$completion_file" ]]; then
    kubectl completion zsh > "$completion_file"
  fi
  source "$completion_file"
fi

if command -v flux &>/dev/null; then
  local completion_file="$HOME"/._completion_flux.zsh
  if [[ ! -a "$completion_file" ]]; then
    flux completion zsh > "$completion_file"
  fi
  source "$completion_file"
fi

function kac() {
  local account=$1
  export AWS_PROFILE=${account}
  local cluster_name=$2
  aws eks update-kubeconfig --name ${cluster_name} --alias ${cluster_name}
}

function kinfo() {
  echo "K8S Info"
  echo "--------"
  echo "Cluster: $(kubectl config current-context)"
  echo "Namespace: $(kubens -c)"
}

function ksh() {
  kc
  kubens
  local choice=$(kubectl get pods -o custom-columns=NAME:.metadata.name --no-headers=true | fzf)
  kubectl exec -it $choice -- sh
}

function kexec() {
  local choice=$(kubectl get pods -o custom-columns=NAME:.metadata.name --no-headers=true | fzf)
  kubectl exec -it $choice -- sh
}

function klogs() {
  local choice=$(kubectl get pods -o custom-columns=NAME:.metadata.name --no-headers=true | fzf)
  kubectl logs -f $choice
}

function kdescribe() {
  local choice=$(kubectl get pods -o custom-columns=NAME:.metadata.name --no-headers=true | fzf)
  kubectl describe pod $choice
}

function ksort() {
  kubectl get pods --sort-by=.metadata.creationTimestamp
}

function krestart() {
  kc
  kubens
  kubectl rollout restart deployment
}

if command -v vault &>/dev/null; then
  complete -o nospace -C /opt/homebrew/bin/vault vault
fi

if [ -d "$HOME/.rover/env" ]; then
  source "$HOME/.rover/env" # apollo graphql rover
fi

if [ -f "$HOME"/.zshrc.local ]; then
  source "$HOME"/.zshrc.local
fi

# Keep at the end per https://github.com/zsh-users/zsh-syntax-highlighting#why-must-zsh-syntax-highlightingzsh-be-sourced-at-the-end-of-the-zshrc-file
zinit ice wait lucid depth=1
zinit load zsh-users/zsh-syntax-highlighting

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

[[ ! -f "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc" ]] || source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"

# end profile
if [[ ${PROFILE_ZSH} == "true" ]]; then
  zprof
fi
