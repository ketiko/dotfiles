set nocompatible " vim > vi mode.
set shell=bash\ --login
set runtimepath+=$HOME/.vim
set viminfo='10000,<5000,s1000,h
set viminfo+=n$HOME/.vim/info
set tags+=./tags,~/.vim/tags;
set directory=~/.vim/swap//
set backupdir=~/.vim/backup//

" Vundle Settings
set runtimepath+=$HOME/.vim/bundle/vundle/
call vundle#rc()
filetype off
" let Vundle manage Vundle required!
Bundle 'gmarik/vundle'
" -------------------

Bundle 'Lokaltog/vim-easymotion'
Bundle 'altercation/vim-colors-solarized.git'
Bundle 'corntrace/bufexplorer'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'ingydotnet/yaml-vim'
Bundle 'ivalkeen/nerdtree-execute'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'majutsushi/tagbar'
Bundle 'maxbrunsfeld/vim-yankstack'
Bundle 'mileszs/ack.vim'
Bundle 'msanders/snipmate.vim'
Bundle 'rking/ag.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'sjl/gundo.vim'
Bundle 'thoughtbot/vim-rspec'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-eunuch'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-obsession'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-rbenv'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tsaleh/vim-matchit'
Bundle 'vim-ruby/vim-ruby'
Bundle 'vim-scripts/dbext.vim'
Bundle 'vim-scripts/openssl.vim'
Bundle 'waylan/vim-markdown-extra-preview'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-session'
Bundle 'Valloric/YouCompleteMe'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'SirVer/ultisnips'

syntax on

" BASIC EDITING CONFIGURATION
set autoindent          " Copy indent from current line when starting a new line
set backspace=2         " makes backspace work normally
set backup
set clipboard=unnamedplus   " Makes using clipboard easier
set cmdheight=1         " Cmd bar 2 rows high
set complete-=i
set completeopt=longest,menu,preview
set cursorline            " highlight current line
set expandtab           " Use spaces not tabs
set gdefault              " Default to /g global replace
set hidden              " allow unsaved background buffers and remember marks/undo for them
set history=10000       " remember more commands and search history
set hlsearch              " Highlight searches and search results
set ignorecase smartcase  " make searches case-sensitive only if they contain upper-case characters
set incsearch             " Show best match while typing a search
set laststatus=2          " Always show the status line
set linebreak           " Don't wrap text in the middle of a word
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
set matchtime=2         " for .2 seconds
set noerrorbells        " No noise
set nostartofline       " Avoid moving cursor to BOL when moving
set novisualbell        " No blinking
set nowrap              " Line wrapping off
set number              " Show line numbers
set numberwidth=1       " Try to use only 1 col when possible
set pastetoggle=<F2>
set relativenumber      " Show relative line numbers
set report=0            " : commands always print changed line count
set ruler               " Display position in the file
set scrolloff=5         " Keep 5 lines (top/bottom) for scope
set shiftwidth=2        " Indent level is 2 spaces wide
set shortmess+=a        " Use [+]/[RO]/[w] for modified/readonly/written
set showcmd             " Show partial command in the last line of the screen
set showmatch             " Show matched paren when balanced
set showtabline=2
set smartindent
set smarttab            " Insert blanks properly at beginning of a line
set softtabstop=2       " <BS> over an autoindent deletes shiftwidth worth of spaces
set splitbelow
set splitright
set switchbuf=useopen
set t_ti= t_te=         " Prevent Vim from clobbering the scrollback buffer
set tabstop=2           " Use 2 spaces for <tab>
set ttyfast
set undodir=~/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000
set vb t_vb=            " No bells. Period.
set wildignore+=*/tmp/*,*/.git/*,*.so,*.swp,*.zip,*/log/*
set wildmenu                    " make tab completion for files/buffers act like bash
set wildmode=longest:list,full  " First list the available options and complete the longest common part, then have further <Tab>s cycle through the possibilities:
set writebackup

let mapleader = ","     " change <leader> from \ to ,

" Per-Filetype Scripts
filetype on             " File type detection on
filetype indent on      " Use filetype-specific indenting when available
filetype plugin on      " Load filetype plugins

set ofu=syntaxcomplete#Complete
set omnifunc=rubycomplete#Complete

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType sql set omnifunc=sqlcomplete#CompleteSQL
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete

" vim-ruby settings
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_use_bundler = 1
let g:ruby_operators = 1

" clear highlighted search using the space bar
nnoremap <Space> :nohlsearch<CR>

" Stay in visual mode after >>
vnoremap << <gv
vnoremap >> >gv
nmap ,gf magg<S-v>G=`a

" Make alt key work in terminal
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw
set timeout ttimeoutlen=50

" Navigate panes vim style
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <m-k> <C-w>+
map <m-j> <C-w>-
map <m-l> <C-w>>
map <m-h> <C-w><

" Have Vim jump to the last position when reopening a file
"if has("autocmd")
  "au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        "\| exe "normal g'\"" | endif
"endif

" Set vim working dir to the files current directory
"autocmd BufEnter * silent! lcd %:p:h
"autocmd BufRead *.rst silent! set textwidth=80

" Spelling
map <F7> :setlocal spell! spell?<CR>
set spell spelllang=en_us
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

" Solarized Settings
if isdirectory(glob("`find ~/.vim/bundle -name vim-colors-solarized -type d -print`"))
  let g:solarized_termtrans=1
  let g:solarized_termcolors=16
  colorscheme solarized
  set t_Co=16
  set background=dark
endif

" Ack Settings
nnoremap <leader>a :Ack

" CTRLP Settings
let g:ctrlp_match_window_reversed=0
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_show_hidden=1
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_regexp = 1
nmap <leader>pf :CtrlP<CR>
nmap <leader>pb :CtrlPBuffer<CR>
nmap <leader>pm :CtrlPMRUFiles<CR>
nmap <leader>pa :CtrlPMixed<CR>

" NERD Tree Settings
map <F4> :NERDTreeFind<CR>
map <F3> :NERDTreeToggle %:p:h<CR>

" Rspec Settings
map <leader>ra :call RunCurrentSpecFile()<CR>
map <leader>rc :call RunNearestSpec()<CR>

" Tabgar Settings
map <leader>tb :TagbarToggle<CR>
let g:tagbar_autofocus=1

" EasyMotion Settings
let g:EasyMotion_leader_key='<leader>'

" Session Settings
let g:session_autosave = 'no'

" YCM Settings
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1

" indent-guides settings
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" utlisnips settings
let g:UltiSnipsExpandTrigger = "<CR>"

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :vsplit $MYVIMRC<CR>
nmap <silent> <leader>sv :source $MYVIMRC<CR>
