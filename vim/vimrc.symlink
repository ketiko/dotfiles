set nocompatible " vim > vi mode.
"set shell=bash\ --login
set runtimepath+=$HOME/.vim
set viminfo='10000,<5000,s1000,h
set viminfo+=n$HOME/.vim/info
set tags+=./tags,~/.vim/tags;
set directory=~/.vim/swap//
set backupdir=~/.vim/backup//

source $HOME/.vimrc.bundles

syntax on

" BASIC EDITING CONFIGURATION
set autoindent          " Copy indent from current line when starting a new line
set backspace=2         " makes backspace work normally
set backup
set clipboard=unnamed   " Makes using clipboard easier
set cmdheight=1         " Cmd bar 2 rows high
set complete-=i
set completeopt=longest,menu,preview
"set cursorline            " highlight current line
set lazyredraw
set expandtab           " Use spaces not tabs
set gdefault              " Default to /g global replace
set hidden              " allow unsaved background buffers and remember marks/undo for them
set history=10000       " remember more commands and search history
set hlsearch              " Highlight searches and search results
set ignorecase smartcase  " make searches case-sensitive only if they contain upper-case characters
set incsearch             " Show best match while typing a search
set laststatus=2          " Always show the status line
set linebreak           " Don't wrap text in the middle of a word
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
set matchtime=2         " for .2 seconds
set noerrorbells        " No noise
set nostartofline       " Avoid moving cursor to BOL when moving
set novisualbell        " No blinking
set nowrap              " Line wrapping off
set number              " Show line numbers
set numberwidth=1       " Try to use only 1 col when possible
set pastetoggle=<F2>
"set relativenumber      " Show relative line numbers
set report=0            " : commands always print changed line count
set ruler               " Display position in the file
set scrolloff=5         " Keep 5 lines (top/bottom) for scope
set shiftwidth=2        " Indent level is 2 spaces wide
set shortmess+=a        " Use [+]/[RO]/[w] for modified/readonly/written
set showcmd             " Show partial command in the last line of the screen
set showmatch             " Show matched paren when balanced
set showtabline=2
set smartindent
set smarttab            " Insert blanks properly at beginning of a line
set softtabstop=2       " <BS> over an autoindent deletes shiftwidth worth of spaces
set splitbelow
set splitright
set switchbuf=useopen
set t_ti= t_te=         " Prevent Vim from clobbering the scrollback buffer
set tabstop=2           " Use 2 spaces for <tab>
set ttyfast
if v:version > 702
  set undodir=~/.vim/undo
  set undofile
  set undoreload=10000
endif
set undolevels=1000
set vb t_vb=            " No bells. Period.
set wildignore+=*/tmp/*,*/.git/*,*.so,*.swp,*.zip,*/log/*
set wildmenu                    " make tab completion for files/buffers act like bash
set wildmode=longest:list,full  " First list the available options and complete the longest common part, then have further <Tab>s cycle through the possibilities:
set writebackup

let mapleader = ","     " change <leader> from \ to ,

" Per-Filetype Scripts
filetype on             " File type detection on
filetype indent on      " Use filetype-specific indenting when available
filetype plugin on      " Load filetype plugins

set ofu=syntaxcomplete#Complete
set omnifunc=rubycomplete#Complete

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType sql set omnifunc=sqlcomplete#CompleteSQL
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete

" vim-ruby settings
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_use_bundler = 1
let g:ruby_operators = 1

" clear highlighted search using the space bar
nnoremap <Space> :nohlsearch<CR>

" make ctrl i increment numbers instead of ctrl a
noremap <C-I> <C-A>

" Stay in visual mode after >>
vnoremap << <gv
vnoremap >> >gv
nmap ,gf magg<S-v>G=`a

" Make alt key work in terminal
let c='a'
while c <= 'z'
  if c != 'n' || c != 'p'
    exec "set <A-".c.">=\e".c
    exec "imap \e".c." <A-".c.">"
    let c = nr2char(1+char2nr(c))
  endif
endw
set timeout ttimeoutlen=50

if exists('+colorcolumn')
  set colorcolumn=80
else
  match ErrorMsg '\%>80v.\+'
end

" Navigate panes vim style
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <m-k> <C-w>+
map <m-j> <C-w>-
map <m-l> <C-w>>
map <m-h> <C-w><

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
"   " (happens when dropping a file on gvim).
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

" Spelling
map <F7> :setlocal spell! spell?<CR>
set spell spelllang=en_us
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

" Solarized Settings
if isdirectory(expand("~/.vim/bundle/vim-colors-solarized"))
  let g:solarized_termtrans=1
  let g:solarized_termcolors=16
  colorscheme solarized
  set t_Co=16
  set background=dark
endif

" CTRLP Settings
let g:ctrlp_match_window_reversed=0
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_show_hidden=1
let g:ctrlp_max_files=0
"let g:ctrlp_regexp=1
"let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:ctrlp_extensions = ['tag']

" YankRing
let g:yankring_replace_n_pkey = '<A-p>'
let g:yankring_replace_n_nkey = '<A-n>'
let g:yankring_history_dir = '$HOME/.vim'

" NERD Tree Settings
map <leader>c :NERDTreeFind<CR>
map <leader>n :NERDTreeToggle %:p:h<CR>

" Rspec Settings
map <leader>ra :call RunCurrentSpecFile()<CR>
map <leader>rc :call RunNearestSpec()<CR>

" Tabgar Settings
map <leader>tb :TagbarToggle<CR>
map <leader>mn :TagbarCurrentTag s<CR>
let g:tagbar_autofocus=1

" EasyMotion Settings
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
let g:EasyMotion_use_smartsign_us = 1
let g:EasyMotion_use_upper = 1

" Session Settings
let g:session_autosave = 'no'

" YCM Settings
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1

" indent-guides settings
"let g:indent_guides_start_level = 2
"let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=Yellow
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=Black

" utlisnips settings
let g:UltiSnipsExpandTrigger = "<F6>"

" i18n
vmap <Leader>z :call I18nTranslateString()<CR>

" Folding
set foldmethod=syntax
let php_folding=1
set foldlevelstart=20

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :vsplit $MYVIMRC<CR>
nmap <silent> <leader>sv :source $MYVIMRC<CR>
